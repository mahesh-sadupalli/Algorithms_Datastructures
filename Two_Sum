# LeetCode Problem: Two Sum

## Problem Statement
Given an array of integers `nums` and an integer `target`, return **indices of the two numbers** such that they add up to `target`.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice.

You can return the answer in any order.

### Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].


### Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Solution 1: Using Brute Force Method 

## Solutions

### Approach 1: Brute Force

This approach involves checking every pair of numbers in the array to see if they add up to the target.

```python
def twoSumBruteForce(nums, target):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]

###Approach 2: Using Hash map
```python
def twoSumHashMap(nums, target):
    hash_map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in hash_map:
            return [hash_map[complement], i]
        hash_map[num] = i
